
KMP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  000005fc  00000690  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002e  0080008c  0080008c  000006bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000728  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000eb0  00000000  00000000  000007b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000070d  00000000  00000000  00001668  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000060e  00000000  00000000  00001d75  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000022c  00000000  00000000  00002384  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041e  00000000  00000000  000025b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008c5  00000000  00000000  000029ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003293  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 c2 00 	jmp	0x184	; 0x184 <__vector_1>
   8:	0c 94 02 01 	jmp	0x204	; 0x204 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 17 02 	jmp	0x42e	; 0x42e <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ef       	ldi	r30, 0xFC	; 252
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 38       	cpi	r26, 0x8C	; 140
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e8       	ldi	r26, 0x8C	; 140
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 3b       	cpi	r26, 0xBA	; 186
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b1 01 	call	0x362	; 0x362 <main>
  8a:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCDWriteByte>:
	for(int i=0;i<n;i++)
	{
		LCDSendCommand(0x1C);
		
	}
}
  92:	9b b3       	in	r25, 0x1b	; 27
  94:	90 7f       	andi	r25, 0xF0	; 240
  96:	9b bb       	out	0x1b, r25	; 27
  98:	2b b3       	in	r18, 0x1b	; 27
  9a:	98 2f       	mov	r25, r24
  9c:	92 95       	swap	r25
  9e:	9f 70       	andi	r25, 0x0F	; 15
  a0:	92 2b       	or	r25, r18
  a2:	9b bb       	out	0x1b, r25	; 27
  a4:	9b b3       	in	r25, 0x1b	; 27
  a6:	90 62       	ori	r25, 0x20	; 32
  a8:	9b bb       	out	0x1b, r25	; 27
  aa:	ef e0       	ldi	r30, 0x0F	; 15
  ac:	f7 e2       	ldi	r31, 0x27	; 39
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <LCDWriteByte+0x1c>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <LCDWriteByte+0x22>
  b4:	00 00       	nop
  b6:	9b b3       	in	r25, 0x1b	; 27
  b8:	9f 7d       	andi	r25, 0xDF	; 223
  ba:	9b bb       	out	0x1b, r25	; 27
  bc:	ef e0       	ldi	r30, 0x0F	; 15
  be:	f7 e2       	ldi	r31, 0x27	; 39
  c0:	31 97       	sbiw	r30, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <LCDWriteByte+0x2e>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <LCDWriteByte+0x34>
  c6:	00 00       	nop
  c8:	9b b3       	in	r25, 0x1b	; 27
  ca:	90 7f       	andi	r25, 0xF0	; 240
  cc:	9b bb       	out	0x1b, r25	; 27
  ce:	9b b3       	in	r25, 0x1b	; 27
  d0:	8f 70       	andi	r24, 0x0F	; 15
  d2:	89 2b       	or	r24, r25
  d4:	8b bb       	out	0x1b, r24	; 27
  d6:	8b b3       	in	r24, 0x1b	; 27
  d8:	80 62       	ori	r24, 0x20	; 32
  da:	8b bb       	out	0x1b, r24	; 27
  dc:	8f e0       	ldi	r24, 0x0F	; 15
  de:	97 e2       	ldi	r25, 0x27	; 39
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <LCDWriteByte+0x4e>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <LCDWriteByte+0x54>
  e6:	00 00       	nop
  e8:	8b b3       	in	r24, 0x1b	; 27
  ea:	8f 7d       	andi	r24, 0xDF	; 223
  ec:	8b bb       	out	0x1b, r24	; 27
  ee:	ef e0       	ldi	r30, 0x0F	; 15
  f0:	f7 e2       	ldi	r31, 0x27	; 39
  f2:	31 97       	sbiw	r30, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <LCDWriteByte+0x60>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <LCDWriteByte+0x66>
  f8:	00 00       	nop
  fa:	08 95       	ret

000000fc <LCDPrint>:
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	ec 01       	movw	r28, r24
 102:	61 11       	cpse	r22, r1
 104:	08 c0       	rjmp	.+16     	; 0x116 <LCDPrint+0x1a>
 106:	8b b3       	in	r24, 0x1b	; 27
 108:	8f 7e       	andi	r24, 0xEF	; 239
 10a:	8b bb       	out	0x1b, r24	; 27
 10c:	84 2f       	mov	r24, r20
 10e:	80 68       	ori	r24, 0x80	; 128
 110:	0e 94 49 00 	call	0x92	; 0x92 <LCDWriteByte>
 114:	0f c0       	rjmp	.+30     	; 0x134 <LCDPrint+0x38>
 116:	8b b3       	in	r24, 0x1b	; 27
 118:	8f 7e       	andi	r24, 0xEF	; 239
 11a:	8b bb       	out	0x1b, r24	; 27
 11c:	84 2f       	mov	r24, r20
 11e:	80 6c       	ori	r24, 0xC0	; 192
 120:	0e 94 49 00 	call	0x92	; 0x92 <LCDWriteByte>
 124:	07 c0       	rjmp	.+14     	; 0x134 <LCDPrint+0x38>
 126:	8b b3       	in	r24, 0x1b	; 27
 128:	80 61       	ori	r24, 0x10	; 16
 12a:	8b bb       	out	0x1b, r24	; 27
 12c:	89 91       	ld	r24, Y+
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 49 00 	call	0x92	; 0x92 <LCDWriteByte>
 134:	88 81       	ld	r24, Y
 136:	81 11       	cpse	r24, r1
 138:	f6 cf       	rjmp	.-20     	; 0x126 <LCDPrint+0x2a>
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <LCDInit>:
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	8a bb       	out	0x1a, r24	; 26
 144:	1b ba       	out	0x1b, r1	; 27
 146:	8b b3       	in	r24, 0x1b	; 27
 148:	8f 7e       	andi	r24, 0xEF	; 239
 14a:	8b bb       	out	0x1b, r24	; 27
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	0e 94 49 00 	call	0x92	; 0x92 <LCDWriteByte>
 152:	8b b3       	in	r24, 0x1b	; 27
 154:	8f 7e       	andi	r24, 0xEF	; 239
 156:	8b bb       	out	0x1b, r24	; 27
 158:	88 e2       	ldi	r24, 0x28	; 40
 15a:	0e 94 49 00 	call	0x92	; 0x92 <LCDWriteByte>
 15e:	8b b3       	in	r24, 0x1b	; 27
 160:	8f 7e       	andi	r24, 0xEF	; 239
 162:	8b bb       	out	0x1b, r24	; 27
 164:	8c e0       	ldi	r24, 0x0C	; 12
 166:	0e 94 49 00 	call	0x92	; 0x92 <LCDWriteByte>
 16a:	8b b3       	in	r24, 0x1b	; 27
 16c:	8f 7e       	andi	r24, 0xEF	; 239
 16e:	8b bb       	out	0x1b, r24	; 27
 170:	86 e0       	ldi	r24, 0x06	; 6
 172:	0e 94 49 00 	call	0x92	; 0x92 <LCDWriteByte>
 176:	08 95       	ret

00000178 <kill_run_man>:
 178:	48 2f       	mov	r20, r24
 17a:	86 e6       	ldi	r24, 0x66	; 102
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 7e 00 	call	0xfc	; 0xfc <LCDPrint>
 182:	08 95       	ret

00000184 <__vector_1>:
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	2f 93       	push	r18
 190:	3f 93       	push	r19
 192:	4f 93       	push	r20
 194:	5f 93       	push	r21
 196:	6f 93       	push	r22
 198:	7f 93       	push	r23
 19a:	8f 93       	push	r24
 19c:	9f 93       	push	r25
 19e:	af 93       	push	r26
 1a0:	bf 93       	push	r27
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	ef 93       	push	r30
 1a8:	ff 93       	push	r31
 1aa:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <speed>
 1ae:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <speed+0x1>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	9b bd       	out	0x2b, r25	; 43
 1b8:	8a bd       	out	0x2a, r24	; 42
 1ba:	60 91 91 00 	lds	r22, 0x0091	; 0x800091 <run_man_position+0x1>
 1be:	61 30       	cpi	r22, 0x01	; 1
 1c0:	71 f4       	brne	.+28     	; 0x1de <__vector_1+0x5a>
 1c2:	c0 e9       	ldi	r28, 0x90	; 144
 1c4:	d0 e0       	ldi	r29, 0x00	; 0
 1c6:	88 81       	ld	r24, Y
 1c8:	70 e0       	ldi	r23, 0x00	; 0
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 bc 00 	call	0x178	; 0x178 <kill_run_man>
 1d0:	19 82       	std	Y+1, r1	; 0x01
 1d2:	48 81       	ld	r20, Y
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	88 e6       	ldi	r24, 0x68	; 104
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 7e 00 	call	0xfc	; 0xfc <LCDPrint>
 1de:	ff 91       	pop	r31
 1e0:	ef 91       	pop	r30
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	bf 91       	pop	r27
 1e8:	af 91       	pop	r26
 1ea:	9f 91       	pop	r25
 1ec:	8f 91       	pop	r24
 1ee:	7f 91       	pop	r23
 1f0:	6f 91       	pop	r22
 1f2:	5f 91       	pop	r21
 1f4:	4f 91       	pop	r20
 1f6:	3f 91       	pop	r19
 1f8:	2f 91       	pop	r18
 1fa:	0f 90       	pop	r0
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	0f 90       	pop	r0
 200:	1f 90       	pop	r1
 202:	18 95       	reti

00000204 <__vector_2>:
 204:	1f 92       	push	r1
 206:	0f 92       	push	r0
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	0f 92       	push	r0
 20c:	11 24       	eor	r1, r1
 20e:	2f 93       	push	r18
 210:	3f 93       	push	r19
 212:	4f 93       	push	r20
 214:	5f 93       	push	r21
 216:	6f 93       	push	r22
 218:	7f 93       	push	r23
 21a:	8f 93       	push	r24
 21c:	9f 93       	push	r25
 21e:	af 93       	push	r26
 220:	bf 93       	push	r27
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	ef 93       	push	r30
 228:	ff 93       	push	r31
 22a:	60 91 91 00 	lds	r22, 0x0091	; 0x800091 <run_man_position+0x1>
 22e:	61 11       	cpse	r22, r1
 230:	0f c0       	rjmp	.+30     	; 0x250 <__vector_2+0x4c>
 232:	c0 e9       	ldi	r28, 0x90	; 144
 234:	d0 e0       	ldi	r29, 0x00	; 0
 236:	88 81       	ld	r24, Y
 238:	70 e0       	ldi	r23, 0x00	; 0
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 bc 00 	call	0x178	; 0x178 <kill_run_man>
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	89 83       	std	Y+1, r24	; 0x01
 244:	48 81       	ld	r20, Y
 246:	61 e0       	ldi	r22, 0x01	; 1
 248:	88 e6       	ldi	r24, 0x68	; 104
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 7e 00 	call	0xfc	; 0xfc <LCDPrint>
 250:	ff 91       	pop	r31
 252:	ef 91       	pop	r30
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
 258:	bf 91       	pop	r27
 25a:	af 91       	pop	r26
 25c:	9f 91       	pop	r25
 25e:	8f 91       	pop	r24
 260:	7f 91       	pop	r23
 262:	6f 91       	pop	r22
 264:	5f 91       	pop	r21
 266:	4f 91       	pop	r20
 268:	3f 91       	pop	r19
 26a:	2f 91       	pop	r18
 26c:	0f 90       	pop	r0
 26e:	0f be       	out	0x3f, r0	; 63
 270:	0f 90       	pop	r0
 272:	1f 90       	pop	r1
 274:	18 95       	reti

00000276 <generator_of_obstacles>:
//////////////////////////////////
void generator_of_obstacles(){
 276:	0f 93       	push	r16
 278:	1f 93       	push	r17
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
		int temp_x=0;
		int temp_y=0;
		for(int i=0;i<size_mas;i++)
 27e:	c0 e0       	ldi	r28, 0x00	; 0
 280:	d0 e0       	ldi	r29, 0x00	; 0
		
	}
}
//////////////////////////////////
void generator_of_obstacles(){
		int temp_x=0;
 282:	00 e0       	ldi	r16, 0x00	; 0
 284:	10 e0       	ldi	r17, 0x00	; 0
		int temp_y=0;
		for(int i=0;i<size_mas;i++)
 286:	1a c0       	rjmp	.+52     	; 0x2bc <generator_of_obstacles+0x46>
		{
			temp_x+=3;
 288:	0d 5f       	subi	r16, 0xFD	; 253
 28a:	1f 4f       	sbci	r17, 0xFF	; 255
			temp_y=rand() % 2;
 28c:	0e 94 89 02 	call	0x512	; 0x512 <rand>
 290:	81 70       	andi	r24, 0x01	; 1
 292:	90 78       	andi	r25, 0x80	; 128
 294:	99 23       	and	r25, r25
 296:	24 f4       	brge	.+8      	; 0x2a0 <generator_of_obstacles+0x2a>
 298:	01 97       	sbiw	r24, 0x01	; 1
 29a:	8e 6f       	ori	r24, 0xFE	; 254
 29c:	9f 6f       	ori	r25, 0xFF	; 255
 29e:	01 96       	adiw	r24, 0x01	; 1
			mass[i].x=temp_x;
 2a0:	fe 01       	movw	r30, r28
 2a2:	ee 0f       	add	r30, r30
 2a4:	ff 1f       	adc	r31, r31
 2a6:	ee 56       	subi	r30, 0x6E	; 110
 2a8:	ff 4f       	sbci	r31, 0xFF	; 255
 2aa:	00 83       	st	Z, r16
			mass[i].y=temp_y;
 2ac:	81 83       	std	Z+1, r24	; 0x01
			LCDPrint("|", temp_y,temp_x);
 2ae:	40 2f       	mov	r20, r16
 2b0:	68 2f       	mov	r22, r24
 2b2:	83 e7       	ldi	r24, 0x73	; 115
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 7e 00 	call	0xfc	; 0xfc <LCDPrint>
}
//////////////////////////////////
void generator_of_obstacles(){
		int temp_x=0;
		int temp_y=0;
		for(int i=0;i<size_mas;i++)
 2ba:	21 96       	adiw	r28, 0x01	; 1
 2bc:	c4 31       	cpi	r28, 0x14	; 20
 2be:	d1 05       	cpc	r29, r1
 2c0:	1c f3       	brlt	.-58     	; 0x288 <generator_of_obstacles+0x12>
			temp_y=rand() % 2;
			mass[i].x=temp_x;
			mass[i].y=temp_y;
			LCDPrint("|", temp_y,temp_x);
		}
}
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	1f 91       	pop	r17
 2c8:	0f 91       	pop	r16
 2ca:	08 95       	ret

000002cc <Game>:
	LCD_PORT &= ~(1 << EN);
	_delay_ms(40);
}

inline void LCDSendCommand(uint8_t cmd) {
	LCD_PORT &= ~(1 << RS);
 2cc:	8b b3       	in	r24, 0x1b	; 27
 2ce:	8f 7e       	andi	r24, 0xEF	; 239
 2d0:	8b bb       	out	0x1b, r24	; 27
	LCDWriteByte(cmd);
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	0e 94 49 00 	call	0x92	; 0x92 <LCDWriteByte>
	
}
uint16_t play_delay = 500;
void Game(){
	LCDSendCommand(0x01);
	LCDPrint("RUN MAN GAME", 0, 2);
 2d8:	42 e0       	ldi	r20, 0x02	; 2
 2da:	60 e0       	ldi	r22, 0x00	; 0
 2dc:	85 e7       	ldi	r24, 0x75	; 117
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 7e 00 	call	0xfc	; 0xfc <LCDPrint>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e4:	2f e3       	ldi	r18, 0x3F	; 63
 2e6:	8d e0       	ldi	r24, 0x0D	; 13
 2e8:	93 e0       	ldi	r25, 0x03	; 3
 2ea:	21 50       	subi	r18, 0x01	; 1
 2ec:	80 40       	sbci	r24, 0x00	; 0
 2ee:	90 40       	sbci	r25, 0x00	; 0
 2f0:	e1 f7       	brne	.-8      	; 0x2ea <Game+0x1e>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <Game+0x28>
 2f4:	00 00       	nop
	LCD_PORT &= ~(1 << EN);
	_delay_ms(40);
}

inline void LCDSendCommand(uint8_t cmd) {
	LCD_PORT &= ~(1 << RS);
 2f6:	8b b3       	in	r24, 0x1b	; 27
 2f8:	8f 7e       	andi	r24, 0xEF	; 239
 2fa:	8b bb       	out	0x1b, r24	; 27
	LCDWriteByte(cmd);
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	0e 94 49 00 	call	0x92	; 0x92 <LCDWriteByte>
void Game(){
	LCDSendCommand(0x01);
	LCDPrint("RUN MAN GAME", 0, 2);
	_delay_ms(1000);
	LCDSendCommand(0x01);
	LCDPrint("LETS GO!", 0, 4);
 302:	44 e0       	ldi	r20, 0x04	; 4
 304:	60 e0       	ldi	r22, 0x00	; 0
 306:	82 e8       	ldi	r24, 0x82	; 130
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	0e 94 7e 00 	call	0xfc	; 0xfc <LCDPrint>
 30e:	2f e3       	ldi	r18, 0x3F	; 63
 310:	8d e0       	ldi	r24, 0x0D	; 13
 312:	93 e0       	ldi	r25, 0x03	; 3
 314:	21 50       	subi	r18, 0x01	; 1
 316:	80 40       	sbci	r24, 0x00	; 0
 318:	90 40       	sbci	r25, 0x00	; 0
 31a:	e1 f7       	brne	.-8      	; 0x314 <Game+0x48>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <Game+0x52>
 31e:	00 00       	nop
	LCD_PORT &= ~(1 << EN);
	_delay_ms(40);
}

inline void LCDSendCommand(uint8_t cmd) {
	LCD_PORT &= ~(1 << RS);
 320:	8b b3       	in	r24, 0x1b	; 27
 322:	8f 7e       	andi	r24, 0xEF	; 239
 324:	8b bb       	out	0x1b, r24	; 27
	LCDWriteByte(cmd);
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	0e 94 49 00 	call	0x92	; 0x92 <LCDWriteByte>
	LCDSendCommand(0x01);
	LCDPrint("LETS GO!", 0, 4);
	_delay_ms(1000);
	LCDSendCommand(0x01);
	
	run_man_position.x=1;
 32c:	e0 e9       	ldi	r30, 0x90	; 144
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	80 83       	st	Z, r24
	run_man_position.y=1;
 334:	81 83       	std	Z+1, r24	; 0x01
	LCDPrint(".", run_man_position.x, run_man_position.y);
 336:	41 e0       	ldi	r20, 0x01	; 1
 338:	61 e0       	ldi	r22, 0x01	; 1
 33a:	88 e6       	ldi	r24, 0x68	; 104
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	0e 94 7e 00 	call	0xfc	; 0xfc <LCDPrint>
		//else
		//mass[i].x=3;
		//mass[i].y=rand() % 2;
		//LCDPrint("|", rand() % 2,mass[i].x);
	//}
	generator_of_obstacles();
 342:	0e 94 3b 01 	call	0x276	; 0x276 <generator_of_obstacles>
	speed = 500;
 346:	84 ef       	ldi	r24, 0xF4	; 244
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <speed+0x1>
 34e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <speed>
	OCR1A = speed * 1;
 352:	9b bd       	out	0x2b, r25	; 43
 354:	8a bd       	out	0x2a, r24	; 42
	TCNT1 = 0;
 356:	1d bc       	out	0x2d, r1	; 45
 358:	1c bc       	out	0x2c, r1	; 44
	TCCR1B |= (1 << CS12) | (1 << CS10); // div 1024
 35a:	8e b5       	in	r24, 0x2e	; 46
 35c:	85 60       	ori	r24, 0x05	; 5
 35e:	8e bd       	out	0x2e, r24	; 46
 360:	08 95       	ret

00000362 <main>:
}


int main(void)
{
    LCDInit();
 362:	0e 94 a0 00 	call	0x140	; 0x140 <LCDInit>

	MCUCR = (0 << ISC01) | (1 << ISC00) | (0 << ISC11) | (1 << ISC10);
 366:	85 e0       	ldi	r24, 0x05	; 5
 368:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0) | (1 << INT1);
 36a:	8b b7       	in	r24, 0x3b	; 59
 36c:	80 6c       	ori	r24, 0xC0	; 192
 36e:	8b bf       	out	0x3b, r24	; 59
	TCCR1B |= (1 << WGM12);
 370:	8e b5       	in	r24, 0x2e	; 46
 372:	88 60       	ori	r24, 0x08	; 8
 374:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << OCIE1A);
 376:	89 b7       	in	r24, 0x39	; 57
 378:	80 61       	ori	r24, 0x10	; 16
 37a:	89 bf       	out	0x39, r24	; 57

	Game();
 37c:	0e 94 66 01 	call	0x2cc	; 0x2cc <Game>
	sei();
 380:	78 94       	sei
 382:	ff cf       	rjmp	.-2      	; 0x382 <main+0x20>

00000384 <RunGame>:
			mass[i].x=temp_x;
			mass[i].y=temp_y;
			LCDPrint("|", temp_y,temp_x);
		}
}
void RunGame(){
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
	
	
	if(counter==40)
 388:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <counter>
 38c:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <counter+0x1>
 390:	88 97       	sbiw	r24, 0x28	; 40
 392:	79 f4       	brne	.+30     	; 0x3b2 <RunGame+0x2e>
	LCD_PORT &= ~(1 << EN);
	_delay_ms(40);
}

inline void LCDSendCommand(uint8_t cmd) {
	LCD_PORT &= ~(1 << RS);
 394:	8b b3       	in	r24, 0x1b	; 27
 396:	8f 7e       	andi	r24, 0xEF	; 239
 398:	8b bb       	out	0x1b, r24	; 27
	LCDWriteByte(cmd);
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	0e 94 49 00 	call	0x92	; 0x92 <LCDWriteByte>
	
	
	if(counter==40)
	{
		LCDSendCommand(0x01);
		generator_of_obstacles();
 3a0:	0e 94 3b 01 	call	0x276	; 0x276 <generator_of_obstacles>
		run_man_position.x=1;
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <run_man_position>
		counter=0;
 3aa:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <counter+0x1>
 3ae:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <counter>
		 
	}
	kill_run_man(run_man_position.x,run_man_position.y);
 3b2:	c0 e9       	ldi	r28, 0x90	; 144
 3b4:	d0 e0       	ldi	r29, 0x00	; 0
 3b6:	69 81       	ldd	r22, Y+1	; 0x01
 3b8:	88 81       	ld	r24, Y
 3ba:	70 e0       	ldi	r23, 0x00	; 0
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	0e 94 bc 00 	call	0x178	; 0x178 <kill_run_man>
	run_man_position.x++;
 3c2:	48 81       	ld	r20, Y
 3c4:	4f 5f       	subi	r20, 0xFF	; 255
 3c6:	48 83       	st	Y, r20
	if(run_man_position.x==mass[temp_counter].x)
 3c8:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <__data_end>
 3cc:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <__data_end+0x1>
 3d0:	fc 01       	movw	r30, r24
 3d2:	ee 0f       	add	r30, r30
 3d4:	ff 1f       	adc	r31, r31
 3d6:	ee 56       	subi	r30, 0x6E	; 110
 3d8:	ff 4f       	sbci	r31, 0xFF	; 255
 3da:	20 81       	ld	r18, Z
 3dc:	42 13       	cpse	r20, r18
 3de:	0f c0       	rjmp	.+30     	; 0x3fe <RunGame+0x7a>
	{
		if(run_man_position.y==mass[temp_counter].y)
 3e0:	30 91 91 00 	lds	r19, 0x0091	; 0x800091 <run_man_position+0x1>
 3e4:	fc 01       	movw	r30, r24
 3e6:	ee 0f       	add	r30, r30
 3e8:	ff 1f       	adc	r31, r31
 3ea:	ee 56       	subi	r30, 0x6E	; 110
 3ec:	ff 4f       	sbci	r31, 0xFF	; 255
 3ee:	21 81       	ldd	r18, Z+1	; 0x01
 3f0:	32 17       	cp	r19, r18
 3f2:	29 f0       	breq	.+10     	; 0x3fe <RunGame+0x7a>
		{
			//endGame();
		}
		else
		temp_counter++;
 3f4:	01 96       	adiw	r24, 0x01	; 1
 3f6:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <__data_end+0x1>
 3fa:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__data_end>
	}

	LCDPrint(".", run_man_position.y, run_man_position.x);
 3fe:	60 91 91 00 	lds	r22, 0x0091	; 0x800091 <run_man_position+0x1>
 402:	88 e6       	ldi	r24, 0x68	; 104
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	0e 94 7e 00 	call	0xfc	; 0xfc <LCDPrint>
	LCD_PORT &= ~(1 << EN);
	_delay_ms(40);
}

inline void LCDSendCommand(uint8_t cmd) {
	LCD_PORT &= ~(1 << RS);
 40a:	8b b3       	in	r24, 0x1b	; 27
 40c:	8f 7e       	andi	r24, 0xEF	; 239
 40e:	8b bb       	out	0x1b, r24	; 27
	LCDWriteByte(cmd);
 410:	88 e1       	ldi	r24, 0x18	; 24
 412:	0e 94 49 00 	call	0x92	; 0x92 <LCDWriteByte>
		temp_counter++;
	}

	LCDPrint(".", run_man_position.y, run_man_position.x);
	LCDSendCommand(0x18);
	counter++;
 416:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <counter>
 41a:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <counter+0x1>
 41e:	01 96       	adiw	r24, 0x01	; 1
 420:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <counter+0x1>
 424:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <counter>

	
}
 428:	df 91       	pop	r29
 42a:	cf 91       	pop	r28
 42c:	08 95       	ret

0000042e <__vector_7>:


ISR(TIMER1_COMPA_vect)
{
 42e:	1f 92       	push	r1
 430:	0f 92       	push	r0
 432:	0f b6       	in	r0, 0x3f	; 63
 434:	0f 92       	push	r0
 436:	11 24       	eor	r1, r1
 438:	2f 93       	push	r18
 43a:	3f 93       	push	r19
 43c:	4f 93       	push	r20
 43e:	5f 93       	push	r21
 440:	6f 93       	push	r22
 442:	7f 93       	push	r23
 444:	8f 93       	push	r24
 446:	9f 93       	push	r25
 448:	af 93       	push	r26
 44a:	bf 93       	push	r27
 44c:	ef 93       	push	r30
 44e:	ff 93       	push	r31
	cli();
 450:	f8 94       	cli
	RunGame();
 452:	0e 94 c2 01 	call	0x384	; 0x384 <RunGame>
	sei();
 456:	78 94       	sei
 458:	ff 91       	pop	r31
 45a:	ef 91       	pop	r30
 45c:	bf 91       	pop	r27
 45e:	af 91       	pop	r26
 460:	9f 91       	pop	r25
 462:	8f 91       	pop	r24
 464:	7f 91       	pop	r23
 466:	6f 91       	pop	r22
 468:	5f 91       	pop	r21
 46a:	4f 91       	pop	r20
 46c:	3f 91       	pop	r19
 46e:	2f 91       	pop	r18
 470:	0f 90       	pop	r0
 472:	0f be       	out	0x3f, r0	; 63
 474:	0f 90       	pop	r0
 476:	1f 90       	pop	r1
 478:	18 95       	reti

0000047a <do_rand>:
 47a:	8f 92       	push	r8
 47c:	9f 92       	push	r9
 47e:	af 92       	push	r10
 480:	bf 92       	push	r11
 482:	cf 92       	push	r12
 484:	df 92       	push	r13
 486:	ef 92       	push	r14
 488:	ff 92       	push	r15
 48a:	cf 93       	push	r28
 48c:	df 93       	push	r29
 48e:	ec 01       	movw	r28, r24
 490:	68 81       	ld	r22, Y
 492:	79 81       	ldd	r23, Y+1	; 0x01
 494:	8a 81       	ldd	r24, Y+2	; 0x02
 496:	9b 81       	ldd	r25, Y+3	; 0x03
 498:	61 15       	cp	r22, r1
 49a:	71 05       	cpc	r23, r1
 49c:	81 05       	cpc	r24, r1
 49e:	91 05       	cpc	r25, r1
 4a0:	21 f4       	brne	.+8      	; 0x4aa <do_rand+0x30>
 4a2:	64 e2       	ldi	r22, 0x24	; 36
 4a4:	79 ed       	ldi	r23, 0xD9	; 217
 4a6:	8b e5       	ldi	r24, 0x5B	; 91
 4a8:	97 e0       	ldi	r25, 0x07	; 7
 4aa:	2d e1       	ldi	r18, 0x1D	; 29
 4ac:	33 ef       	ldi	r19, 0xF3	; 243
 4ae:	41 e0       	ldi	r20, 0x01	; 1
 4b0:	50 e0       	ldi	r21, 0x00	; 0
 4b2:	0e 94 99 02 	call	0x532	; 0x532 <__divmodsi4>
 4b6:	49 01       	movw	r8, r18
 4b8:	5a 01       	movw	r10, r20
 4ba:	9b 01       	movw	r18, r22
 4bc:	ac 01       	movw	r20, r24
 4be:	a7 ea       	ldi	r26, 0xA7	; 167
 4c0:	b1 e4       	ldi	r27, 0x41	; 65
 4c2:	0e 94 b8 02 	call	0x570	; 0x570 <__muluhisi3>
 4c6:	6b 01       	movw	r12, r22
 4c8:	7c 01       	movw	r14, r24
 4ca:	ac ee       	ldi	r26, 0xEC	; 236
 4cc:	b4 ef       	ldi	r27, 0xF4	; 244
 4ce:	a5 01       	movw	r20, r10
 4d0:	94 01       	movw	r18, r8
 4d2:	0e 94 c6 02 	call	0x58c	; 0x58c <__mulohisi3>
 4d6:	dc 01       	movw	r26, r24
 4d8:	cb 01       	movw	r24, r22
 4da:	8c 0d       	add	r24, r12
 4dc:	9d 1d       	adc	r25, r13
 4de:	ae 1d       	adc	r26, r14
 4e0:	bf 1d       	adc	r27, r15
 4e2:	b7 ff       	sbrs	r27, 7
 4e4:	03 c0       	rjmp	.+6      	; 0x4ec <do_rand+0x72>
 4e6:	01 97       	sbiw	r24, 0x01	; 1
 4e8:	a1 09       	sbc	r26, r1
 4ea:	b0 48       	sbci	r27, 0x80	; 128
 4ec:	88 83       	st	Y, r24
 4ee:	99 83       	std	Y+1, r25	; 0x01
 4f0:	aa 83       	std	Y+2, r26	; 0x02
 4f2:	bb 83       	std	Y+3, r27	; 0x03
 4f4:	9f 77       	andi	r25, 0x7F	; 127
 4f6:	df 91       	pop	r29
 4f8:	cf 91       	pop	r28
 4fa:	ff 90       	pop	r15
 4fc:	ef 90       	pop	r14
 4fe:	df 90       	pop	r13
 500:	cf 90       	pop	r12
 502:	bf 90       	pop	r11
 504:	af 90       	pop	r10
 506:	9f 90       	pop	r9
 508:	8f 90       	pop	r8
 50a:	08 95       	ret

0000050c <rand_r>:
 50c:	0e 94 3d 02 	call	0x47a	; 0x47a <do_rand>
 510:	08 95       	ret

00000512 <rand>:
 512:	80 e6       	ldi	r24, 0x60	; 96
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	0e 94 3d 02 	call	0x47a	; 0x47a <do_rand>
 51a:	08 95       	ret

0000051c <srand>:
 51c:	a0 e0       	ldi	r26, 0x00	; 0
 51e:	b0 e0       	ldi	r27, 0x00	; 0
 520:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 524:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 528:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 52c:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 530:	08 95       	ret

00000532 <__divmodsi4>:
 532:	05 2e       	mov	r0, r21
 534:	97 fb       	bst	r25, 7
 536:	1e f4       	brtc	.+6      	; 0x53e <__divmodsi4+0xc>
 538:	00 94       	com	r0
 53a:	0e 94 b0 02 	call	0x560	; 0x560 <__negsi2>
 53e:	57 fd       	sbrc	r21, 7
 540:	07 d0       	rcall	.+14     	; 0x550 <__divmodsi4_neg2>
 542:	0e 94 cb 02 	call	0x596	; 0x596 <__udivmodsi4>
 546:	07 fc       	sbrc	r0, 7
 548:	03 d0       	rcall	.+6      	; 0x550 <__divmodsi4_neg2>
 54a:	4e f4       	brtc	.+18     	; 0x55e <__divmodsi4_exit>
 54c:	0c 94 b0 02 	jmp	0x560	; 0x560 <__negsi2>

00000550 <__divmodsi4_neg2>:
 550:	50 95       	com	r21
 552:	40 95       	com	r20
 554:	30 95       	com	r19
 556:	21 95       	neg	r18
 558:	3f 4f       	sbci	r19, 0xFF	; 255
 55a:	4f 4f       	sbci	r20, 0xFF	; 255
 55c:	5f 4f       	sbci	r21, 0xFF	; 255

0000055e <__divmodsi4_exit>:
 55e:	08 95       	ret

00000560 <__negsi2>:
 560:	90 95       	com	r25
 562:	80 95       	com	r24
 564:	70 95       	com	r23
 566:	61 95       	neg	r22
 568:	7f 4f       	sbci	r23, 0xFF	; 255
 56a:	8f 4f       	sbci	r24, 0xFF	; 255
 56c:	9f 4f       	sbci	r25, 0xFF	; 255
 56e:	08 95       	ret

00000570 <__muluhisi3>:
 570:	0e 94 ed 02 	call	0x5da	; 0x5da <__umulhisi3>
 574:	a5 9f       	mul	r26, r21
 576:	90 0d       	add	r25, r0
 578:	b4 9f       	mul	r27, r20
 57a:	90 0d       	add	r25, r0
 57c:	a4 9f       	mul	r26, r20
 57e:	80 0d       	add	r24, r0
 580:	91 1d       	adc	r25, r1
 582:	11 24       	eor	r1, r1
 584:	08 95       	ret

00000586 <__mulshisi3>:
 586:	b7 ff       	sbrs	r27, 7
 588:	0c 94 b8 02 	jmp	0x570	; 0x570 <__muluhisi3>

0000058c <__mulohisi3>:
 58c:	0e 94 b8 02 	call	0x570	; 0x570 <__muluhisi3>
 590:	82 1b       	sub	r24, r18
 592:	93 0b       	sbc	r25, r19
 594:	08 95       	ret

00000596 <__udivmodsi4>:
 596:	a1 e2       	ldi	r26, 0x21	; 33
 598:	1a 2e       	mov	r1, r26
 59a:	aa 1b       	sub	r26, r26
 59c:	bb 1b       	sub	r27, r27
 59e:	fd 01       	movw	r30, r26
 5a0:	0d c0       	rjmp	.+26     	; 0x5bc <__udivmodsi4_ep>

000005a2 <__udivmodsi4_loop>:
 5a2:	aa 1f       	adc	r26, r26
 5a4:	bb 1f       	adc	r27, r27
 5a6:	ee 1f       	adc	r30, r30
 5a8:	ff 1f       	adc	r31, r31
 5aa:	a2 17       	cp	r26, r18
 5ac:	b3 07       	cpc	r27, r19
 5ae:	e4 07       	cpc	r30, r20
 5b0:	f5 07       	cpc	r31, r21
 5b2:	20 f0       	brcs	.+8      	; 0x5bc <__udivmodsi4_ep>
 5b4:	a2 1b       	sub	r26, r18
 5b6:	b3 0b       	sbc	r27, r19
 5b8:	e4 0b       	sbc	r30, r20
 5ba:	f5 0b       	sbc	r31, r21

000005bc <__udivmodsi4_ep>:
 5bc:	66 1f       	adc	r22, r22
 5be:	77 1f       	adc	r23, r23
 5c0:	88 1f       	adc	r24, r24
 5c2:	99 1f       	adc	r25, r25
 5c4:	1a 94       	dec	r1
 5c6:	69 f7       	brne	.-38     	; 0x5a2 <__udivmodsi4_loop>
 5c8:	60 95       	com	r22
 5ca:	70 95       	com	r23
 5cc:	80 95       	com	r24
 5ce:	90 95       	com	r25
 5d0:	9b 01       	movw	r18, r22
 5d2:	ac 01       	movw	r20, r24
 5d4:	bd 01       	movw	r22, r26
 5d6:	cf 01       	movw	r24, r30
 5d8:	08 95       	ret

000005da <__umulhisi3>:
 5da:	a2 9f       	mul	r26, r18
 5dc:	b0 01       	movw	r22, r0
 5de:	b3 9f       	mul	r27, r19
 5e0:	c0 01       	movw	r24, r0
 5e2:	a3 9f       	mul	r26, r19
 5e4:	70 0d       	add	r23, r0
 5e6:	81 1d       	adc	r24, r1
 5e8:	11 24       	eor	r1, r1
 5ea:	91 1d       	adc	r25, r1
 5ec:	b2 9f       	mul	r27, r18
 5ee:	70 0d       	add	r23, r0
 5f0:	81 1d       	adc	r24, r1
 5f2:	11 24       	eor	r1, r1
 5f4:	91 1d       	adc	r25, r1
 5f6:	08 95       	ret

000005f8 <_exit>:
 5f8:	f8 94       	cli

000005fa <__stop_program>:
 5fa:	ff cf       	rjmp	.-2      	; 0x5fa <__stop_program>
