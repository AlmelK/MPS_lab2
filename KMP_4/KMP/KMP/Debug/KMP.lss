
KMP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000654  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00000654  000006e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002e  0080008c  0080008c  00000714  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000744  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000780  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f22  00000000  00000000  00000818  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000070d  00000000  00000000  0000173a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000655  00000000  00000000  00001e47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000250  00000000  00000000  0000249c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041e  00000000  00000000  000026ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000097a  00000000  00000000  00002b0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00003484  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 c2 00 	jmp	0x184	; 0x184 <__vector_1>
   8:	0c 94 02 01 	jmp	0x204	; 0x204 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 43 02 	jmp	0x486	; 0x486 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 38       	cpi	r26, 0x8C	; 140
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e8       	ldi	r26, 0x8C	; 140
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 3b       	cpi	r26, 0xBA	; 186
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 dd 01 	call	0x3ba	; 0x3ba <main>
  8a:	0c 94 28 03 	jmp	0x650	; 0x650 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCDWriteByte>:
	for(int i=0;i<n;i++)
	{
		LCDSendCommand(0x1C);
		
	}
}
  92:	9b b3       	in	r25, 0x1b	; 27
  94:	90 7f       	andi	r25, 0xF0	; 240
  96:	9b bb       	out	0x1b, r25	; 27
  98:	2b b3       	in	r18, 0x1b	; 27
  9a:	98 2f       	mov	r25, r24
  9c:	92 95       	swap	r25
  9e:	9f 70       	andi	r25, 0x0F	; 15
  a0:	92 2b       	or	r25, r18
  a2:	9b bb       	out	0x1b, r25	; 27
  a4:	9b b3       	in	r25, 0x1b	; 27
  a6:	90 62       	ori	r25, 0x20	; 32
  a8:	9b bb       	out	0x1b, r25	; 27
  aa:	ef e0       	ldi	r30, 0x0F	; 15
  ac:	f7 e2       	ldi	r31, 0x27	; 39
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <LCDWriteByte+0x1c>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <LCDWriteByte+0x22>
  b4:	00 00       	nop
  b6:	9b b3       	in	r25, 0x1b	; 27
  b8:	9f 7d       	andi	r25, 0xDF	; 223
  ba:	9b bb       	out	0x1b, r25	; 27
  bc:	ef e0       	ldi	r30, 0x0F	; 15
  be:	f7 e2       	ldi	r31, 0x27	; 39
  c0:	31 97       	sbiw	r30, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <LCDWriteByte+0x2e>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <LCDWriteByte+0x34>
  c6:	00 00       	nop
  c8:	9b b3       	in	r25, 0x1b	; 27
  ca:	90 7f       	andi	r25, 0xF0	; 240
  cc:	9b bb       	out	0x1b, r25	; 27
  ce:	9b b3       	in	r25, 0x1b	; 27
  d0:	8f 70       	andi	r24, 0x0F	; 15
  d2:	89 2b       	or	r24, r25
  d4:	8b bb       	out	0x1b, r24	; 27
  d6:	8b b3       	in	r24, 0x1b	; 27
  d8:	80 62       	ori	r24, 0x20	; 32
  da:	8b bb       	out	0x1b, r24	; 27
  dc:	8f e0       	ldi	r24, 0x0F	; 15
  de:	97 e2       	ldi	r25, 0x27	; 39
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <LCDWriteByte+0x4e>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <LCDWriteByte+0x54>
  e6:	00 00       	nop
  e8:	8b b3       	in	r24, 0x1b	; 27
  ea:	8f 7d       	andi	r24, 0xDF	; 223
  ec:	8b bb       	out	0x1b, r24	; 27
  ee:	ef e0       	ldi	r30, 0x0F	; 15
  f0:	f7 e2       	ldi	r31, 0x27	; 39
  f2:	31 97       	sbiw	r30, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <LCDWriteByte+0x60>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <LCDWriteByte+0x66>
  f8:	00 00       	nop
  fa:	08 95       	ret

000000fc <LCDPrint>:
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	ec 01       	movw	r28, r24
 102:	61 11       	cpse	r22, r1
 104:	08 c0       	rjmp	.+16     	; 0x116 <LCDPrint+0x1a>
 106:	8b b3       	in	r24, 0x1b	; 27
 108:	8f 7e       	andi	r24, 0xEF	; 239
 10a:	8b bb       	out	0x1b, r24	; 27
 10c:	84 2f       	mov	r24, r20
 10e:	80 68       	ori	r24, 0x80	; 128
 110:	0e 94 49 00 	call	0x92	; 0x92 <LCDWriteByte>
 114:	0f c0       	rjmp	.+30     	; 0x134 <LCDPrint+0x38>
 116:	8b b3       	in	r24, 0x1b	; 27
 118:	8f 7e       	andi	r24, 0xEF	; 239
 11a:	8b bb       	out	0x1b, r24	; 27
 11c:	84 2f       	mov	r24, r20
 11e:	80 6c       	ori	r24, 0xC0	; 192
 120:	0e 94 49 00 	call	0x92	; 0x92 <LCDWriteByte>
 124:	07 c0       	rjmp	.+14     	; 0x134 <LCDPrint+0x38>
 126:	8b b3       	in	r24, 0x1b	; 27
 128:	80 61       	ori	r24, 0x10	; 16
 12a:	8b bb       	out	0x1b, r24	; 27
 12c:	89 91       	ld	r24, Y+
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 49 00 	call	0x92	; 0x92 <LCDWriteByte>
 134:	88 81       	ld	r24, Y
 136:	81 11       	cpse	r24, r1
 138:	f6 cf       	rjmp	.-20     	; 0x126 <LCDPrint+0x2a>
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <LCDInit>:
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	8a bb       	out	0x1a, r24	; 26
 144:	1b ba       	out	0x1b, r1	; 27
 146:	8b b3       	in	r24, 0x1b	; 27
 148:	8f 7e       	andi	r24, 0xEF	; 239
 14a:	8b bb       	out	0x1b, r24	; 27
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	0e 94 49 00 	call	0x92	; 0x92 <LCDWriteByte>
 152:	8b b3       	in	r24, 0x1b	; 27
 154:	8f 7e       	andi	r24, 0xEF	; 239
 156:	8b bb       	out	0x1b, r24	; 27
 158:	88 e2       	ldi	r24, 0x28	; 40
 15a:	0e 94 49 00 	call	0x92	; 0x92 <LCDWriteByte>
 15e:	8b b3       	in	r24, 0x1b	; 27
 160:	8f 7e       	andi	r24, 0xEF	; 239
 162:	8b bb       	out	0x1b, r24	; 27
 164:	8c e0       	ldi	r24, 0x0C	; 12
 166:	0e 94 49 00 	call	0x92	; 0x92 <LCDWriteByte>
 16a:	8b b3       	in	r24, 0x1b	; 27
 16c:	8f 7e       	andi	r24, 0xEF	; 239
 16e:	8b bb       	out	0x1b, r24	; 27
 170:	86 e0       	ldi	r24, 0x06	; 6
 172:	0e 94 49 00 	call	0x92	; 0x92 <LCDWriteByte>
 176:	08 95       	ret

00000178 <kill_run_man>:
 178:	48 2f       	mov	r20, r24
 17a:	86 e6       	ldi	r24, 0x66	; 102
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 7e 00 	call	0xfc	; 0xfc <LCDPrint>
 182:	08 95       	ret

00000184 <__vector_1>:
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	2f 93       	push	r18
 190:	3f 93       	push	r19
 192:	4f 93       	push	r20
 194:	5f 93       	push	r21
 196:	6f 93       	push	r22
 198:	7f 93       	push	r23
 19a:	8f 93       	push	r24
 19c:	9f 93       	push	r25
 19e:	af 93       	push	r26
 1a0:	bf 93       	push	r27
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	ef 93       	push	r30
 1a8:	ff 93       	push	r31
 1aa:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <speed>
 1ae:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <speed+0x1>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	9b bd       	out	0x2b, r25	; 43
 1b8:	8a bd       	out	0x2a, r24	; 42
 1ba:	60 91 91 00 	lds	r22, 0x0091	; 0x800091 <run_man_position+0x1>
 1be:	61 30       	cpi	r22, 0x01	; 1
 1c0:	71 f4       	brne	.+28     	; 0x1de <__vector_1+0x5a>
 1c2:	c0 e9       	ldi	r28, 0x90	; 144
 1c4:	d0 e0       	ldi	r29, 0x00	; 0
 1c6:	88 81       	ld	r24, Y
 1c8:	70 e0       	ldi	r23, 0x00	; 0
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 bc 00 	call	0x178	; 0x178 <kill_run_man>
 1d0:	19 82       	std	Y+1, r1	; 0x01
 1d2:	48 81       	ld	r20, Y
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	88 e6       	ldi	r24, 0x68	; 104
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 7e 00 	call	0xfc	; 0xfc <LCDPrint>
 1de:	ff 91       	pop	r31
 1e0:	ef 91       	pop	r30
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	bf 91       	pop	r27
 1e8:	af 91       	pop	r26
 1ea:	9f 91       	pop	r25
 1ec:	8f 91       	pop	r24
 1ee:	7f 91       	pop	r23
 1f0:	6f 91       	pop	r22
 1f2:	5f 91       	pop	r21
 1f4:	4f 91       	pop	r20
 1f6:	3f 91       	pop	r19
 1f8:	2f 91       	pop	r18
 1fa:	0f 90       	pop	r0
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	0f 90       	pop	r0
 200:	1f 90       	pop	r1
 202:	18 95       	reti

00000204 <__vector_2>:
 204:	1f 92       	push	r1
 206:	0f 92       	push	r0
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	0f 92       	push	r0
 20c:	11 24       	eor	r1, r1
 20e:	2f 93       	push	r18
 210:	3f 93       	push	r19
 212:	4f 93       	push	r20
 214:	5f 93       	push	r21
 216:	6f 93       	push	r22
 218:	7f 93       	push	r23
 21a:	8f 93       	push	r24
 21c:	9f 93       	push	r25
 21e:	af 93       	push	r26
 220:	bf 93       	push	r27
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	ef 93       	push	r30
 228:	ff 93       	push	r31
 22a:	60 91 91 00 	lds	r22, 0x0091	; 0x800091 <run_man_position+0x1>
 22e:	61 11       	cpse	r22, r1
 230:	0f c0       	rjmp	.+30     	; 0x250 <__vector_2+0x4c>
 232:	c0 e9       	ldi	r28, 0x90	; 144
 234:	d0 e0       	ldi	r29, 0x00	; 0
 236:	88 81       	ld	r24, Y
 238:	70 e0       	ldi	r23, 0x00	; 0
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 bc 00 	call	0x178	; 0x178 <kill_run_man>
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	89 83       	std	Y+1, r24	; 0x01
 244:	48 81       	ld	r20, Y
 246:	61 e0       	ldi	r22, 0x01	; 1
 248:	88 e6       	ldi	r24, 0x68	; 104
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 7e 00 	call	0xfc	; 0xfc <LCDPrint>
 250:	ff 91       	pop	r31
 252:	ef 91       	pop	r30
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
 258:	bf 91       	pop	r27
 25a:	af 91       	pop	r26
 25c:	9f 91       	pop	r25
 25e:	8f 91       	pop	r24
 260:	7f 91       	pop	r23
 262:	6f 91       	pop	r22
 264:	5f 91       	pop	r21
 266:	4f 91       	pop	r20
 268:	3f 91       	pop	r19
 26a:	2f 91       	pop	r18
 26c:	0f 90       	pop	r0
 26e:	0f be       	out	0x3f, r0	; 63
 270:	0f 90       	pop	r0
 272:	1f 90       	pop	r1
 274:	18 95       	reti

00000276 <generator_of_obstacles>:
//////////////////////////////////
void generator_of_obstacles(){
 276:	0f 93       	push	r16
 278:	1f 93       	push	r17
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
		int temp_x=0;
		int temp_y=0;
		//speed = 500;
		OCR1AH = 0b01111010;
 27e:	8a e7       	ldi	r24, 0x7A	; 122
 280:	8b bd       	out	0x2b, r24	; 43
		OCR1AL = 0b00010010;
 282:	82 e1       	ldi	r24, 0x12	; 18
 284:	8a bd       	out	0x2a, r24	; 42
		//TCNT1 = 0;
		TCCR1B |= (1 << CS11) | (1 << CS10) ; // div 1024
 286:	8e b5       	in	r24, 0x2e	; 46
 288:	83 60       	ori	r24, 0x03	; 3
 28a:	8e bd       	out	0x2e, r24	; 46
		for(int i=0;i<size_mas;i++)
 28c:	c0 e0       	ldi	r28, 0x00	; 0
 28e:	d0 e0       	ldi	r29, 0x00	; 0
		
	}
}
//////////////////////////////////
void generator_of_obstacles(){
		int temp_x=0;
 290:	00 e0       	ldi	r16, 0x00	; 0
 292:	10 e0       	ldi	r17, 0x00	; 0
		//speed = 500;
		OCR1AH = 0b01111010;
		OCR1AL = 0b00010010;
		//TCNT1 = 0;
		TCCR1B |= (1 << CS11) | (1 << CS10) ; // div 1024
		for(int i=0;i<size_mas;i++)
 294:	1a c0       	rjmp	.+52     	; 0x2ca <generator_of_obstacles+0x54>
		{
			temp_x+=3;
 296:	0d 5f       	subi	r16, 0xFD	; 253
 298:	1f 4f       	sbci	r17, 0xFF	; 255
			temp_y=rand() % 2;
 29a:	0e 94 b5 02 	call	0x56a	; 0x56a <rand>
 29e:	81 70       	andi	r24, 0x01	; 1
 2a0:	90 78       	andi	r25, 0x80	; 128
 2a2:	99 23       	and	r25, r25
 2a4:	24 f4       	brge	.+8      	; 0x2ae <generator_of_obstacles+0x38>
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	8e 6f       	ori	r24, 0xFE	; 254
 2aa:	9f 6f       	ori	r25, 0xFF	; 255
 2ac:	01 96       	adiw	r24, 0x01	; 1
			mass[i].x=temp_x;
 2ae:	fe 01       	movw	r30, r28
 2b0:	ee 0f       	add	r30, r30
 2b2:	ff 1f       	adc	r31, r31
 2b4:	ee 56       	subi	r30, 0x6E	; 110
 2b6:	ff 4f       	sbci	r31, 0xFF	; 255
 2b8:	00 83       	st	Z, r16
			mass[i].y=temp_y;
 2ba:	81 83       	std	Z+1, r24	; 0x01
			LCDPrint("|", temp_y,temp_x);
 2bc:	40 2f       	mov	r20, r16
 2be:	68 2f       	mov	r22, r24
 2c0:	83 e7       	ldi	r24, 0x73	; 115
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	0e 94 7e 00 	call	0xfc	; 0xfc <LCDPrint>
		//speed = 500;
		OCR1AH = 0b01111010;
		OCR1AL = 0b00010010;
		//TCNT1 = 0;
		TCCR1B |= (1 << CS11) | (1 << CS10) ; // div 1024
		for(int i=0;i<size_mas;i++)
 2c8:	21 96       	adiw	r28, 0x01	; 1
 2ca:	c4 31       	cpi	r28, 0x14	; 20
 2cc:	d1 05       	cpc	r29, r1
 2ce:	1c f3       	brlt	.-58     	; 0x296 <generator_of_obstacles+0x20>
			mass[i].x=temp_x;
			mass[i].y=temp_y;
			LCDPrint("|", temp_y,temp_x);
		}
		
}
 2d0:	df 91       	pop	r29
 2d2:	cf 91       	pop	r28
 2d4:	1f 91       	pop	r17
 2d6:	0f 91       	pop	r16
 2d8:	08 95       	ret

000002da <lvl_2>:

void lvl_2(){
 2da:	0f 93       	push	r16
 2dc:	1f 93       	push	r17
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
			int temp_x=0;
			int temp_y=0;
			//speed = 500;
			OCR1AH = 0b01111010;
 2e2:	8a e7       	ldi	r24, 0x7A	; 122
 2e4:	8b bd       	out	0x2b, r24	; 43
			OCR1AL = 0b00010010;
 2e6:	82 e1       	ldi	r24, 0x12	; 18
 2e8:	8a bd       	out	0x2a, r24	; 42
			//TCNT1 = 0;
			TCCR1B |= (1 << CS10); // div 256
 2ea:	8e b5       	in	r24, 0x2e	; 46
 2ec:	81 60       	ori	r24, 0x01	; 1
 2ee:	8e bd       	out	0x2e, r24	; 46
			for(int i=0;i<size_mas;i++)
 2f0:	c0 e0       	ldi	r28, 0x00	; 0
 2f2:	d0 e0       	ldi	r29, 0x00	; 0
		}
		
}

void lvl_2(){
			int temp_x=0;
 2f4:	00 e0       	ldi	r16, 0x00	; 0
 2f6:	10 e0       	ldi	r17, 0x00	; 0
			//speed = 500;
			OCR1AH = 0b01111010;
			OCR1AL = 0b00010010;
			//TCNT1 = 0;
			TCCR1B |= (1 << CS10); // div 256
			for(int i=0;i<size_mas;i++)
 2f8:	1a c0       	rjmp	.+52     	; 0x32e <lvl_2+0x54>
			{
				temp_x+=3;
 2fa:	0d 5f       	subi	r16, 0xFD	; 253
 2fc:	1f 4f       	sbci	r17, 0xFF	; 255
				temp_y=rand() % 2;
 2fe:	0e 94 b5 02 	call	0x56a	; 0x56a <rand>
 302:	81 70       	andi	r24, 0x01	; 1
 304:	90 78       	andi	r25, 0x80	; 128
 306:	99 23       	and	r25, r25
 308:	24 f4       	brge	.+8      	; 0x312 <lvl_2+0x38>
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	8e 6f       	ori	r24, 0xFE	; 254
 30e:	9f 6f       	ori	r25, 0xFF	; 255
 310:	01 96       	adiw	r24, 0x01	; 1
				mass[i].x=temp_x;
 312:	fe 01       	movw	r30, r28
 314:	ee 0f       	add	r30, r30
 316:	ff 1f       	adc	r31, r31
 318:	ee 56       	subi	r30, 0x6E	; 110
 31a:	ff 4f       	sbci	r31, 0xFF	; 255
 31c:	00 83       	st	Z, r16
				mass[i].y=temp_y;
 31e:	81 83       	std	Z+1, r24	; 0x01
				LCDPrint("|", temp_y,temp_x);
 320:	40 2f       	mov	r20, r16
 322:	68 2f       	mov	r22, r24
 324:	83 e7       	ldi	r24, 0x73	; 115
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	0e 94 7e 00 	call	0xfc	; 0xfc <LCDPrint>
			//speed = 500;
			OCR1AH = 0b01111010;
			OCR1AL = 0b00010010;
			//TCNT1 = 0;
			TCCR1B |= (1 << CS10); // div 256
			for(int i=0;i<size_mas;i++)
 32c:	21 96       	adiw	r28, 0x01	; 1
 32e:	c4 31       	cpi	r28, 0x14	; 20
 330:	d1 05       	cpc	r29, r1
 332:	1c f3       	brlt	.-58     	; 0x2fa <lvl_2+0x20>
				temp_y=rand() % 2;
				mass[i].x=temp_x;
				mass[i].y=temp_y;
				LCDPrint("|", temp_y,temp_x);
			}
}
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	1f 91       	pop	r17
 33a:	0f 91       	pop	r16
 33c:	08 95       	ret

0000033e <Game>:
	LCD_PORT &= ~(1 << EN);
	_delay_ms(40);
}

inline void LCDSendCommand(uint8_t cmd) {
	LCD_PORT &= ~(1 << RS);
 33e:	8b b3       	in	r24, 0x1b	; 27
 340:	8f 7e       	andi	r24, 0xEF	; 239
 342:	8b bb       	out	0x1b, r24	; 27
	LCDWriteByte(cmd);
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	0e 94 49 00 	call	0x92	; 0x92 <LCDWriteByte>
	
}
uint16_t play_delay = 500;
void Game(){
	LCDSendCommand(0x01);
	LCDPrint("RUN MAN GAME", 0, 2);
 34a:	42 e0       	ldi	r20, 0x02	; 2
 34c:	60 e0       	ldi	r22, 0x00	; 0
 34e:	85 e7       	ldi	r24, 0x75	; 117
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 7e 00 	call	0xfc	; 0xfc <LCDPrint>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 356:	2f e3       	ldi	r18, 0x3F	; 63
 358:	8d e0       	ldi	r24, 0x0D	; 13
 35a:	93 e0       	ldi	r25, 0x03	; 3
 35c:	21 50       	subi	r18, 0x01	; 1
 35e:	80 40       	sbci	r24, 0x00	; 0
 360:	90 40       	sbci	r25, 0x00	; 0
 362:	e1 f7       	brne	.-8      	; 0x35c <Game+0x1e>
 364:	00 c0       	rjmp	.+0      	; 0x366 <Game+0x28>
 366:	00 00       	nop
	LCD_PORT &= ~(1 << EN);
	_delay_ms(40);
}

inline void LCDSendCommand(uint8_t cmd) {
	LCD_PORT &= ~(1 << RS);
 368:	8b b3       	in	r24, 0x1b	; 27
 36a:	8f 7e       	andi	r24, 0xEF	; 239
 36c:	8b bb       	out	0x1b, r24	; 27
	LCDWriteByte(cmd);
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	0e 94 49 00 	call	0x92	; 0x92 <LCDWriteByte>
void Game(){
	LCDSendCommand(0x01);
	LCDPrint("RUN MAN GAME", 0, 2);
	_delay_ms(1000);
	LCDSendCommand(0x01);
	LCDPrint("LETS GO!", 0, 4);
 374:	44 e0       	ldi	r20, 0x04	; 4
 376:	60 e0       	ldi	r22, 0x00	; 0
 378:	82 e8       	ldi	r24, 0x82	; 130
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 7e 00 	call	0xfc	; 0xfc <LCDPrint>
 380:	2f e3       	ldi	r18, 0x3F	; 63
 382:	8d e0       	ldi	r24, 0x0D	; 13
 384:	93 e0       	ldi	r25, 0x03	; 3
 386:	21 50       	subi	r18, 0x01	; 1
 388:	80 40       	sbci	r24, 0x00	; 0
 38a:	90 40       	sbci	r25, 0x00	; 0
 38c:	e1 f7       	brne	.-8      	; 0x386 <Game+0x48>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <Game+0x52>
 390:	00 00       	nop
	LCD_PORT &= ~(1 << EN);
	_delay_ms(40);
}

inline void LCDSendCommand(uint8_t cmd) {
	LCD_PORT &= ~(1 << RS);
 392:	8b b3       	in	r24, 0x1b	; 27
 394:	8f 7e       	andi	r24, 0xEF	; 239
 396:	8b bb       	out	0x1b, r24	; 27
	LCDWriteByte(cmd);
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	0e 94 49 00 	call	0x92	; 0x92 <LCDWriteByte>
	LCDSendCommand(0x01);
	LCDPrint("LETS GO!", 0, 4);
	_delay_ms(1000);
	LCDSendCommand(0x01);
	
	run_man_position.x=1;
 39e:	e0 e9       	ldi	r30, 0x90	; 144
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	80 83       	st	Z, r24
	run_man_position.y=1;
 3a6:	81 83       	std	Z+1, r24	; 0x01
	LCDPrint(".", run_man_position.x, run_man_position.y);
 3a8:	41 e0       	ldi	r20, 0x01	; 1
 3aa:	61 e0       	ldi	r22, 0x01	; 1
 3ac:	88 e6       	ldi	r24, 0x68	; 104
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 7e 00 	call	0xfc	; 0xfc <LCDPrint>
		//mass[i].x=3;
		//mass[i].y=rand() % 2;
		//LCDPrint("|", rand() % 2,mass[i].x);
	//}
	//generator_of_obstacles();
	lvl_2();
 3b4:	0e 94 6d 01 	call	0x2da	; 0x2da <lvl_2>
 3b8:	08 95       	ret

000003ba <main>:
}


int main(void)
{
    LCDInit();
 3ba:	0e 94 a0 00 	call	0x140	; 0x140 <LCDInit>

	MCUCR = (0 << ISC01) | (1 << ISC00) | (0 << ISC11) | (1 << ISC10);
 3be:	85 e0       	ldi	r24, 0x05	; 5
 3c0:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0) | (1 << INT1);
 3c2:	8b b7       	in	r24, 0x3b	; 59
 3c4:	80 6c       	ori	r24, 0xC0	; 192
 3c6:	8b bf       	out	0x3b, r24	; 59
	TCCR1B |= (1 << WGM12);
 3c8:	8e b5       	in	r24, 0x2e	; 46
 3ca:	88 60       	ori	r24, 0x08	; 8
 3cc:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << OCIE1A);
 3ce:	89 b7       	in	r24, 0x39	; 57
 3d0:	80 61       	ori	r24, 0x10	; 16
 3d2:	89 bf       	out	0x39, r24	; 57

	Game();
 3d4:	0e 94 9f 01 	call	0x33e	; 0x33e <Game>
	sei();
 3d8:	78 94       	sei
 3da:	ff cf       	rjmp	.-2      	; 0x3da <main+0x20>

000003dc <RunGame>:
				mass[i].x=temp_x;
				mass[i].y=temp_y;
				LCDPrint("|", temp_y,temp_x);
			}
}
void RunGame(){
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
	
	
	if(counter==40)
 3e0:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <counter>
 3e4:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <counter+0x1>
 3e8:	88 97       	sbiw	r24, 0x28	; 40
 3ea:	79 f4       	brne	.+30     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
	LCD_PORT &= ~(1 << EN);
	_delay_ms(40);
}

inline void LCDSendCommand(uint8_t cmd) {
	LCD_PORT &= ~(1 << RS);
 3ec:	8b b3       	in	r24, 0x1b	; 27
 3ee:	8f 7e       	andi	r24, 0xEF	; 239
 3f0:	8b bb       	out	0x1b, r24	; 27
	LCDWriteByte(cmd);
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	0e 94 49 00 	call	0x92	; 0x92 <LCDWriteByte>
	
	
	if(counter==40)
	{
		LCDSendCommand(0x01);
		generator_of_obstacles();
 3f8:	0e 94 3b 01 	call	0x276	; 0x276 <generator_of_obstacles>
		//lvl_2();
		run_man_position.x=1;
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <run_man_position>
		counter=0;
 402:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <counter+0x1>
 406:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <counter>
		 
	}
	kill_run_man(run_man_position.x,run_man_position.y);
 40a:	c0 e9       	ldi	r28, 0x90	; 144
 40c:	d0 e0       	ldi	r29, 0x00	; 0
 40e:	69 81       	ldd	r22, Y+1	; 0x01
 410:	88 81       	ld	r24, Y
 412:	70 e0       	ldi	r23, 0x00	; 0
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	0e 94 bc 00 	call	0x178	; 0x178 <kill_run_man>
	run_man_position.x++;
 41a:	48 81       	ld	r20, Y
 41c:	4f 5f       	subi	r20, 0xFF	; 255
 41e:	48 83       	st	Y, r20
	if(run_man_position.x==mass[temp_counter].x)
 420:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <__data_end>
 424:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <__data_end+0x1>
 428:	fc 01       	movw	r30, r24
 42a:	ee 0f       	add	r30, r30
 42c:	ff 1f       	adc	r31, r31
 42e:	ee 56       	subi	r30, 0x6E	; 110
 430:	ff 4f       	sbci	r31, 0xFF	; 255
 432:	20 81       	ld	r18, Z
 434:	42 13       	cpse	r20, r18
 436:	0f c0       	rjmp	.+30     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
	{
		if(run_man_position.y==mass[temp_counter].y)
 438:	30 91 91 00 	lds	r19, 0x0091	; 0x800091 <run_man_position+0x1>
 43c:	fc 01       	movw	r30, r24
 43e:	ee 0f       	add	r30, r30
 440:	ff 1f       	adc	r31, r31
 442:	ee 56       	subi	r30, 0x6E	; 110
 444:	ff 4f       	sbci	r31, 0xFF	; 255
 446:	21 81       	ldd	r18, Z+1	; 0x01
 448:	32 17       	cp	r19, r18
 44a:	29 f0       	breq	.+10     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
		{
			//endGame();
		}
		else
		temp_counter++;
 44c:	01 96       	adiw	r24, 0x01	; 1
 44e:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <__data_end+0x1>
 452:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__data_end>
	}

	LCDPrint(".", run_man_position.y, run_man_position.x);
 456:	60 91 91 00 	lds	r22, 0x0091	; 0x800091 <run_man_position+0x1>
 45a:	88 e6       	ldi	r24, 0x68	; 104
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	0e 94 7e 00 	call	0xfc	; 0xfc <LCDPrint>
	LCD_PORT &= ~(1 << EN);
	_delay_ms(40);
}

inline void LCDSendCommand(uint8_t cmd) {
	LCD_PORT &= ~(1 << RS);
 462:	8b b3       	in	r24, 0x1b	; 27
 464:	8f 7e       	andi	r24, 0xEF	; 239
 466:	8b bb       	out	0x1b, r24	; 27
	LCDWriteByte(cmd);
 468:	88 e1       	ldi	r24, 0x18	; 24
 46a:	0e 94 49 00 	call	0x92	; 0x92 <LCDWriteByte>
		temp_counter++;
	}

	LCDPrint(".", run_man_position.y, run_man_position.x);
	LCDSendCommand(0x18);
	counter++;
 46e:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <counter>
 472:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <counter+0x1>
 476:	01 96       	adiw	r24, 0x01	; 1
 478:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <counter+0x1>
 47c:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <counter>

	
}
 480:	df 91       	pop	r29
 482:	cf 91       	pop	r28
 484:	08 95       	ret

00000486 <__vector_7>:


ISR(TIMER1_COMPA_vect)
{
 486:	1f 92       	push	r1
 488:	0f 92       	push	r0
 48a:	0f b6       	in	r0, 0x3f	; 63
 48c:	0f 92       	push	r0
 48e:	11 24       	eor	r1, r1
 490:	2f 93       	push	r18
 492:	3f 93       	push	r19
 494:	4f 93       	push	r20
 496:	5f 93       	push	r21
 498:	6f 93       	push	r22
 49a:	7f 93       	push	r23
 49c:	8f 93       	push	r24
 49e:	9f 93       	push	r25
 4a0:	af 93       	push	r26
 4a2:	bf 93       	push	r27
 4a4:	ef 93       	push	r30
 4a6:	ff 93       	push	r31
	cli();
 4a8:	f8 94       	cli
	RunGame();
 4aa:	0e 94 ee 01 	call	0x3dc	; 0x3dc <RunGame>
	sei();
 4ae:	78 94       	sei
 4b0:	ff 91       	pop	r31
 4b2:	ef 91       	pop	r30
 4b4:	bf 91       	pop	r27
 4b6:	af 91       	pop	r26
 4b8:	9f 91       	pop	r25
 4ba:	8f 91       	pop	r24
 4bc:	7f 91       	pop	r23
 4be:	6f 91       	pop	r22
 4c0:	5f 91       	pop	r21
 4c2:	4f 91       	pop	r20
 4c4:	3f 91       	pop	r19
 4c6:	2f 91       	pop	r18
 4c8:	0f 90       	pop	r0
 4ca:	0f be       	out	0x3f, r0	; 63
 4cc:	0f 90       	pop	r0
 4ce:	1f 90       	pop	r1
 4d0:	18 95       	reti

000004d2 <do_rand>:
 4d2:	8f 92       	push	r8
 4d4:	9f 92       	push	r9
 4d6:	af 92       	push	r10
 4d8:	bf 92       	push	r11
 4da:	cf 92       	push	r12
 4dc:	df 92       	push	r13
 4de:	ef 92       	push	r14
 4e0:	ff 92       	push	r15
 4e2:	cf 93       	push	r28
 4e4:	df 93       	push	r29
 4e6:	ec 01       	movw	r28, r24
 4e8:	68 81       	ld	r22, Y
 4ea:	79 81       	ldd	r23, Y+1	; 0x01
 4ec:	8a 81       	ldd	r24, Y+2	; 0x02
 4ee:	9b 81       	ldd	r25, Y+3	; 0x03
 4f0:	61 15       	cp	r22, r1
 4f2:	71 05       	cpc	r23, r1
 4f4:	81 05       	cpc	r24, r1
 4f6:	91 05       	cpc	r25, r1
 4f8:	21 f4       	brne	.+8      	; 0x502 <do_rand+0x30>
 4fa:	64 e2       	ldi	r22, 0x24	; 36
 4fc:	79 ed       	ldi	r23, 0xD9	; 217
 4fe:	8b e5       	ldi	r24, 0x5B	; 91
 500:	97 e0       	ldi	r25, 0x07	; 7
 502:	2d e1       	ldi	r18, 0x1D	; 29
 504:	33 ef       	ldi	r19, 0xF3	; 243
 506:	41 e0       	ldi	r20, 0x01	; 1
 508:	50 e0       	ldi	r21, 0x00	; 0
 50a:	0e 94 c5 02 	call	0x58a	; 0x58a <__divmodsi4>
 50e:	49 01       	movw	r8, r18
 510:	5a 01       	movw	r10, r20
 512:	9b 01       	movw	r18, r22
 514:	ac 01       	movw	r20, r24
 516:	a7 ea       	ldi	r26, 0xA7	; 167
 518:	b1 e4       	ldi	r27, 0x41	; 65
 51a:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <__muluhisi3>
 51e:	6b 01       	movw	r12, r22
 520:	7c 01       	movw	r14, r24
 522:	ac ee       	ldi	r26, 0xEC	; 236
 524:	b4 ef       	ldi	r27, 0xF4	; 244
 526:	a5 01       	movw	r20, r10
 528:	94 01       	movw	r18, r8
 52a:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__mulohisi3>
 52e:	dc 01       	movw	r26, r24
 530:	cb 01       	movw	r24, r22
 532:	8c 0d       	add	r24, r12
 534:	9d 1d       	adc	r25, r13
 536:	ae 1d       	adc	r26, r14
 538:	bf 1d       	adc	r27, r15
 53a:	b7 ff       	sbrs	r27, 7
 53c:	03 c0       	rjmp	.+6      	; 0x544 <do_rand+0x72>
 53e:	01 97       	sbiw	r24, 0x01	; 1
 540:	a1 09       	sbc	r26, r1
 542:	b0 48       	sbci	r27, 0x80	; 128
 544:	88 83       	st	Y, r24
 546:	99 83       	std	Y+1, r25	; 0x01
 548:	aa 83       	std	Y+2, r26	; 0x02
 54a:	bb 83       	std	Y+3, r27	; 0x03
 54c:	9f 77       	andi	r25, 0x7F	; 127
 54e:	df 91       	pop	r29
 550:	cf 91       	pop	r28
 552:	ff 90       	pop	r15
 554:	ef 90       	pop	r14
 556:	df 90       	pop	r13
 558:	cf 90       	pop	r12
 55a:	bf 90       	pop	r11
 55c:	af 90       	pop	r10
 55e:	9f 90       	pop	r9
 560:	8f 90       	pop	r8
 562:	08 95       	ret

00000564 <rand_r>:
 564:	0e 94 69 02 	call	0x4d2	; 0x4d2 <do_rand>
 568:	08 95       	ret

0000056a <rand>:
 56a:	80 e6       	ldi	r24, 0x60	; 96
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	0e 94 69 02 	call	0x4d2	; 0x4d2 <do_rand>
 572:	08 95       	ret

00000574 <srand>:
 574:	a0 e0       	ldi	r26, 0x00	; 0
 576:	b0 e0       	ldi	r27, 0x00	; 0
 578:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 57c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 580:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 584:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 588:	08 95       	ret

0000058a <__divmodsi4>:
 58a:	05 2e       	mov	r0, r21
 58c:	97 fb       	bst	r25, 7
 58e:	1e f4       	brtc	.+6      	; 0x596 <__divmodsi4+0xc>
 590:	00 94       	com	r0
 592:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <__negsi2>
 596:	57 fd       	sbrc	r21, 7
 598:	07 d0       	rcall	.+14     	; 0x5a8 <__divmodsi4_neg2>
 59a:	0e 94 f7 02 	call	0x5ee	; 0x5ee <__udivmodsi4>
 59e:	07 fc       	sbrc	r0, 7
 5a0:	03 d0       	rcall	.+6      	; 0x5a8 <__divmodsi4_neg2>
 5a2:	4e f4       	brtc	.+18     	; 0x5b6 <__divmodsi4_exit>
 5a4:	0c 94 dc 02 	jmp	0x5b8	; 0x5b8 <__negsi2>

000005a8 <__divmodsi4_neg2>:
 5a8:	50 95       	com	r21
 5aa:	40 95       	com	r20
 5ac:	30 95       	com	r19
 5ae:	21 95       	neg	r18
 5b0:	3f 4f       	sbci	r19, 0xFF	; 255
 5b2:	4f 4f       	sbci	r20, 0xFF	; 255
 5b4:	5f 4f       	sbci	r21, 0xFF	; 255

000005b6 <__divmodsi4_exit>:
 5b6:	08 95       	ret

000005b8 <__negsi2>:
 5b8:	90 95       	com	r25
 5ba:	80 95       	com	r24
 5bc:	70 95       	com	r23
 5be:	61 95       	neg	r22
 5c0:	7f 4f       	sbci	r23, 0xFF	; 255
 5c2:	8f 4f       	sbci	r24, 0xFF	; 255
 5c4:	9f 4f       	sbci	r25, 0xFF	; 255
 5c6:	08 95       	ret

000005c8 <__muluhisi3>:
 5c8:	0e 94 19 03 	call	0x632	; 0x632 <__umulhisi3>
 5cc:	a5 9f       	mul	r26, r21
 5ce:	90 0d       	add	r25, r0
 5d0:	b4 9f       	mul	r27, r20
 5d2:	90 0d       	add	r25, r0
 5d4:	a4 9f       	mul	r26, r20
 5d6:	80 0d       	add	r24, r0
 5d8:	91 1d       	adc	r25, r1
 5da:	11 24       	eor	r1, r1
 5dc:	08 95       	ret

000005de <__mulshisi3>:
 5de:	b7 ff       	sbrs	r27, 7
 5e0:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__muluhisi3>

000005e4 <__mulohisi3>:
 5e4:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <__muluhisi3>
 5e8:	82 1b       	sub	r24, r18
 5ea:	93 0b       	sbc	r25, r19
 5ec:	08 95       	ret

000005ee <__udivmodsi4>:
 5ee:	a1 e2       	ldi	r26, 0x21	; 33
 5f0:	1a 2e       	mov	r1, r26
 5f2:	aa 1b       	sub	r26, r26
 5f4:	bb 1b       	sub	r27, r27
 5f6:	fd 01       	movw	r30, r26
 5f8:	0d c0       	rjmp	.+26     	; 0x614 <__udivmodsi4_ep>

000005fa <__udivmodsi4_loop>:
 5fa:	aa 1f       	adc	r26, r26
 5fc:	bb 1f       	adc	r27, r27
 5fe:	ee 1f       	adc	r30, r30
 600:	ff 1f       	adc	r31, r31
 602:	a2 17       	cp	r26, r18
 604:	b3 07       	cpc	r27, r19
 606:	e4 07       	cpc	r30, r20
 608:	f5 07       	cpc	r31, r21
 60a:	20 f0       	brcs	.+8      	; 0x614 <__udivmodsi4_ep>
 60c:	a2 1b       	sub	r26, r18
 60e:	b3 0b       	sbc	r27, r19
 610:	e4 0b       	sbc	r30, r20
 612:	f5 0b       	sbc	r31, r21

00000614 <__udivmodsi4_ep>:
 614:	66 1f       	adc	r22, r22
 616:	77 1f       	adc	r23, r23
 618:	88 1f       	adc	r24, r24
 61a:	99 1f       	adc	r25, r25
 61c:	1a 94       	dec	r1
 61e:	69 f7       	brne	.-38     	; 0x5fa <__udivmodsi4_loop>
 620:	60 95       	com	r22
 622:	70 95       	com	r23
 624:	80 95       	com	r24
 626:	90 95       	com	r25
 628:	9b 01       	movw	r18, r22
 62a:	ac 01       	movw	r20, r24
 62c:	bd 01       	movw	r22, r26
 62e:	cf 01       	movw	r24, r30
 630:	08 95       	ret

00000632 <__umulhisi3>:
 632:	a2 9f       	mul	r26, r18
 634:	b0 01       	movw	r22, r0
 636:	b3 9f       	mul	r27, r19
 638:	c0 01       	movw	r24, r0
 63a:	a3 9f       	mul	r26, r19
 63c:	70 0d       	add	r23, r0
 63e:	81 1d       	adc	r24, r1
 640:	11 24       	eor	r1, r1
 642:	91 1d       	adc	r25, r1
 644:	b2 9f       	mul	r27, r18
 646:	70 0d       	add	r23, r0
 648:	81 1d       	adc	r24, r1
 64a:	11 24       	eor	r1, r1
 64c:	91 1d       	adc	r25, r1
 64e:	08 95       	ret

00000650 <_exit>:
 650:	f8 94       	cli

00000652 <__stop_program>:
 652:	ff cf       	rjmp	.-2      	; 0x652 <__stop_program>
